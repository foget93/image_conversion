Задание

Напишите программы для выполнения разных манипуляций с изображениями:
hmirror — отражение по горизонтали,
vmirror — отражение по вертикали,
sobel — оператор Собеля, описание которого ниже.
Все программы должны собираться из одного файла CMakeLists.txt, в котором нужно определить три цели.
Оператор Собеля выделяет границы и резкие переходы в изображении. Он учитывает только яркость цвета, которую в данной задаче нужно вычислить как сумму цветовых компонент. На выходе получается монохромное изображение, то есть изображение, где цветовые компоненты каждого пикселя совпадают.
Значение оператора Собеля определяется восемью соседними пикселями изображения. Обозначим их следующим образом:
image
Каждое из этих значений задаёт яркость одного из пикселей, соседних с тем, который нужно вычислить. Для вычисления значения оператора Собеля найдите две его компоненты: 
g
x
=
−
t
l
−
2
t
c
−
t
r
+
b
l
+
2
b
c
+
b
r
gx=−tl−2tc−tr+bl+2bc+br,
g
y
=
−
t
l
−
2
c
l
−
b
l
+
t
r
+
2
c
r
+
b
r
gy=−tl−2cl−bl+tr+2cr+br.
Коэффициенты проиллюстрированы на этом изображении:
image
Итоговое значение оператора Собеля вычислите как 
g
x
2
+
g
y
2
gx 
2
 +gy 
2
 
​	
 . Получится число double. Приведите его к диапазону от 0 до 255 алгоритмом std::clamp<double>, а затем преобразуйте в std::byte конструкцией static_cast. Этим значением нужно заполнить все три компоненты цвета.
Крайние пиксели изображения, у которых есть не все соседние, заполняйте чёрным цветом.
Отражения можно и нужно реализовать как inplace-операцию, то есть меняющую уже существующее изображение без создания нового объекта Image. Оператор Собеля проще реализовать как функцию с такой сигнатурой: img_lib::Image Sobel(const img_lib::Image& image).
Формат входных данных

Изображение PPM.
Формат выходных данных

Изображение PPM.
Ограничения

Реализуйте зеркала как inplace-операции, меняющие изображение, а оператор Собеля — как создающую новое.
Все чтения и записи изображений выполняйте по строкам, а не по столбцам для эффективности. Внешний цикл должен проходить по строкам изображения, а внутренний — по пикселям одной строки.
Не меняйте библиотеку ImgLib.
В CMakeLists.txt не перечисляйте файлы библиотеки в каждой цели. Вместо этого используйте переменную IMGLIB_FILES.
Пример

Для примера мы взяли неотразимого попугайчика и отразили его, а потом применили преобразование Собеля. Результат ниже:
слева сверху — оригинал,
справа от него — отражение по горизонтали,
снизу от оригинала — отражение по вертикали,
снизу справа — преобразование Собеля. 
image
Все изображения приведены в архиве:
patrik.zip
Что отправлять на проверку

Напишите три программы в файлах:
vmirr.cpp,
hmirr.cpp,
sobel.cpp.
В CMakeLists.txt напишите скрипт для сборки этих программ.
Как будет тестироваться ваш код

Мы проверим, что:
программа горизонтального отражения работает правильно;
программа вертикального отражения работает правильно;
программа построения преобразования Собеля работает правильно;
вертикальное и горизонтальное отображение реализованы как inplace-функции;
преобразование Собеля оставляет чёрную границу в один пиксель;
изображения преобразуются по строкам, а не по столбцам;
в CMakeLists.txt не перечисляются файлы ImgLib для каждой цели.

Для горизонтального отражения используйте std::swap. Проходите половину каждой строчки и меняйте симметричные пиксели местами.
Учтите, последний пиксель строки имеет номер w - 1, где w — ширина изображения.
Для вертикального отражения используйте std::swap_range. Пройдите половину всех строк изображения. Если размер нечётный, центральную строку обрабатывать не нужно.
Учтите, последняя строка имеет номер h - 1, где h — высота изображения.
При реализации оператора Собеля первую и последнюю строку можно заполнить чёрным алгоритмом std::fill.
Сначала вычислите яркость всех соседних пикселей, просуммировав значения цветовых компонент. Для этого их нужно преобразовать к типу int.
Корень извлекайте функцией std::sqrt из <cmath>.
Перед преобразованием обратно в byte примените std::clamp с параметрами — результат преобразования, 0., 255..